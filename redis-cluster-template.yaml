kind: Template
apiVersion: "v1"
metadata:
  name: "redis-cluster"
  annotations:
    openshift.io/display-name: "Redis Cluster"
    openshift.io/long-description: "This template provides a Redis cluster.
    openshift.io/provider-display-name: "Wen Hao."
    openshift.io/support-url: "https://wenhao.github.io"
    description: "Redis cluster service."
    tags: "redis"
    iconClass: "icon-mysql-database"
message: "The following service(s) have been created in your project: \n\n    redis: ${REDIS_SERVICE_NAME}\n\nFor more information about using this template, see https://github.com/wenhao/openshift-redis/blob/master/README.md."
labels:
  template: "redis-cluster"
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      generation: 1
      labels:
        app: "${REDIS_SERVICE_NAME}-redis"
      name: "${REDIS_SERVICE_NAME}-redis"
    spec:
      replicas: 3
      selector:
        app: "${REDIS_SERVICE_NAME}-redis"
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      triggers:
        - type: ConfigChange
          imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: "redis:${VERSION}"
              namespace: "${NAMESPACE}"
          type: ImageChange
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "${REDIS_SERVICE_NAME}-redis"
        spec:
          containers:
          - image: ' '
            imagePullPolicy: Always
            name: redis
            ports:
            - containerPort: 6379
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /redis-master-data
              name: data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: data
      test: false
    status: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      generation: 1
      labels:
        app: "${REDIS_SERVICE_NAME}-redis-master"
        redis-master: "true"
        redis-sentinel: "true"
        role: master
      name: "${REDIS_SERVICE_NAME}-redis-master"
    spec:
      replicas: 1
      selector:
        app: "${REDIS_SERVICE_NAME}-redis-master"
        redis-master: "true"
        redis-sentinel: "true"
        role: master
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      triggers:
        - imageChangeParams:
          automatic: true
          containerNames:
            - redis
          from:
            kind: ImageStreamTag
            name: "redis:${VERSION}"
            namespace: "{NAMESPACE}"
        type: ImageChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - sentinel
            from:
              kind: ImageStreamTag
              name: "redis:${VERSION}"
              namespace: "{NAMESPACE}"
          type: ImageChange
        - type: ConfigChange
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "${REDIS_SERVICE_NAME}-redis-master"
            redis-master: "true"
            redis-sentinel: "true"
            role: master
        spec:
          containers:
          - env:
            - name: MASTER
              value: "true"
            image: ' '
            imagePullPolicy: Always
            name: redis
            ports:
            - containerPort: 6379
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /redis-master-data
              name: data
          - env:
            - name: SENTINEL
              value: "true"
            image: ' '
            imagePullPolicy: Always
            name: sentinel
            ports:
            - containerPort: 26379
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: data
      test: false
    status: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      generation: 1
      labels:
        app: "${REDIS_SERVICE_NAME}-redis-sentinel"
        redis-sentinel: "true"
      name: "${REDIS_SERVICE_NAME}-redis-sentinel"
    spec:
      replicas: 3
      selector:
        app: "${REDIS_SERVICE_NAME}-redis-sentinel"
        redis-sentinel: "true"
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      triggers:
        - type: ConfigChange
          imageChangeParams:
            automatic: true
            containerNames:
            - sentinel
            from:
              kind: ImageStreamTag
              name: "redis:${VERSION}"
              namespace: "{NAMESPACE}"
          type: ImageChange
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "${REDIS_SERVICE_NAME}-redis-sentinel"
            redis-sentinel: "true"
        spec:
          containers:
          - env:
            - name: SENTINEL
              value: "true"
            image: ' '
            imagePullPolicy: Always
            name: sentinel
            ports:
            - containerPort: 26379
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            volumeMounts:
            - mountPath: /redis-master-data
              name: data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: data
      test: false
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        name: master
        role: service
      name: "${REDIS_SERVICE_NAME}-redis-master"
    spec:
      ports:
      - port: 6379
        protocol: TCP
        targetPort: 6379
      selector:
        redis-master: "true"
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        name: sentinel
        role: service
      name: "${REDIS_SERVICE_NAME}-redis-sentinel"
    spec:
      ports:
      - port: 26379
        protocol: TCP
        targetPort: 26379
      selector:
        redis-sentinel: "true"
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
parameters:
  - name: NAMESPACE
    displayName: Namespace
    description: "The OpenShift Namespace where the ImageStream resides."
    value: openshift
  - name: REDIS_SERVICE_NAME
    displayName: "Redis Service Name"
    description: "The name of the OpenShift Service exposed for the Redis cluster, pre-set a suffix '-redis'."
    value: redis
    equired: true
  - name: VERSION
    displayName: "Version of Redis"
    description: "Version of Redis image to be used (1.0.0, or latest)."
    value: "1.0.0"
    required: true
