apiVersion: v1
kind: DeploymentConfig
metadata:
  name: "${REDIS_SERVICE_NAME}-redis-sentinel"
  labels:
    app: "${REDIS_SERVICE_NAME}-redis-sentinel"
    redis-sentinel: "true"
spec:
  replicas: 3
  selector:
    redis-sentinel: "true"
  strategy:
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - sentinel
        from:
          kind: ImageStreamTag
          name: "redis:${VERSION}"
          namespace: "${NAMESPACE}"
  template:
    metadata:
      labels:
        app: "${REDIS_SERVICE_NAME}-redis-sentinel"
        redis-sentinel: "true"
        role: sentinel
    spec:
      containers:
        - name: sentinel
          image: ' '
          imagePullPolicy: Always
          ports:
            - containerPort: 26379
              protocol: TCP
          env:
            - name: SENTINEL
              value: "true"
            - name: REDIS_MASTER_SERVICE_HOST
              value: "${REDIS_SERVICE_NAME}-redis-master.${NAMESPACE}.svc"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
      volumes:
        - emptyDir: {}
          name: data        
